{"version":3,"sources":["components/Error.jsx","components/Formulario.jsx","components/Imagen.jsx","components/ListadoImagenes.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","setImagenes","paginaActual","setPaginaActual","totalPaginas","setTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarAPI","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab2eebae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"my-3 text-center text-white alert alert-danger\">\r\n            {mensaje}\r\n        </p>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error'\r\n\r\nconst Formulario = ({ setBusqueda }) => {\r\n\r\n    const [termino, setTermino] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const buscarImagenes = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if (termino.trim() === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        setError(false);\r\n\r\n        // enviar el termino de busqueda hacia el co mponente principal\r\n        setBusqueda(termino);\r\n\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={buscarImagenes}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"form-groug col-md-8\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Busca una imagen, ejemplo: futbol o cafe\"\r\n                        onChange={ e => setTermino(e.target.value) }\r\n                    />\r\n                </div>\r\n                <div className=\"form-groug col-md-4\">\r\n                    <input \r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-warning btn-block\"\r\n                        value=\"Buscar\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            {error ? <Error mensaje=\"Agrega un termino de busqueda\" /> : null}\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react'\r\n\r\nconst Imagen = ({ imagen }) => {\r\n\r\n    // Extraer los valores\r\n    const { largeImageURL, likes, previewURL, tags, views } = imagen\r\n\r\n    return ( \r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img \r\n                    src={previewURL} \r\n                    alt={tags}\r\n                    className=\"card-img-top\"\r\n                />\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Me gusta</p>\r\n                    <p className=\"card-text\">{views} Vistas</p>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <a \r\n                        href={largeImageURL}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"btn btn-outline-info btn-block\"\r\n                    >Ver Imagen</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Imagen;","import React from 'react';\r\nimport Imagen from './Imagen';\r\n\r\nconst ListadoImagenes = ({ imagenes }) => {\r\n    return ( \r\n        <div className=\"col-12 p-5 row\">\r\n            {imagenes.map(imagen => (\r\n                <Imagen \r\n                    key={imagen.id} \r\n                    imagen={imagen}\r\n                />\r\n            ))}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ListadoImagenes;","import React, { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImagenes from './components/ListadoImagenes';\n\nfunction App() {\n\n  const [busqueda, setBusqueda] = useState('');\n  const [imagenes, setImagenes] = useState([]);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [totalPaginas, setTotalPaginas] = useState(1);\n\n  useEffect(() => {\n\n    const consultarAPI = async () =>{\n\n      if (busqueda === '') return;\n\n      const imagenesPorPagina = 30;\n      const key = '15192574-3ba7c5bd66133a109c4e976fc';\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaActual}`;\n\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n\n      setImagenes(resultado.hits);\n\n      // Calcular el total de paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina);\n      setTotalPaginas(calcularTotalPaginas);\n\n      // Mover la pantalla hacia arriba\n      const jumbotron = document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({\n        behavior:'smooth'\n      });\n\n    }\n\n    consultarAPI();\n    \n  }, [busqueda, paginaActual])\n\n  // Definir la pagina anterior\n  const paginaAnterior = () => {\n\n    const nuevaPaginaActual = paginaActual - 1;\n\n      if (nuevaPaginaActual === 0) return;\n\n    setPaginaActual(nuevaPaginaActual);\n\n  \n  }\n  // Definir la pagina Sigiente\n  const paginaSiguiente = () => {\n\n    const nuevaPaginaActual = paginaActual + 1;\n\n      if (nuevaPaginaActual > totalPaginas) return;\n\n    setPaginaActual(nuevaPaginaActual);\n\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Imagenes</p>\n        <Formulario \n          setBusqueda={setBusqueda}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImagenes\n          imagenes={imagenes}\n        />\n        {\n          (paginaActual === 1) ? null :\n            <button\n              type=\"button\"\n              className=\"btn btn-info mr-1 mb-5\"\n              onClick={paginaAnterior}\n            >&laquo; Anterior</button>\n        }\n        {\n          (paginaActual === totalPaginas) ? null :\n            <button\n              type=\"button\"\n              className=\"btn btn-info mb-5\"\n              onClick={paginaSiguiente}\n            >Siguiente &raquo;</button>\n        }\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}